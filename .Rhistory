# Load strategy functions
script_name <- 'Project.R' # change to your own script name
source(script_name)
# Run backtest
wealth_seq= walk_forward(trading_algorithm, initialise_state, df_train, df_test)
# Print log final wealth
println('log wealth = ', log(tail(wealth_seq, 1)))
# Compute daily returns
daily_returns <- diff(wealth_seq) / head(wealth_seq, -1)
# Drop any NA (e.g., first day)
daily_returns <- daily_returns[!is.na(daily_returns)]
# Annualized return
total_days <- length(daily_returns)
annualized_return <- (tail(wealth_seq, 1))^(252 / total_days) - 1
# Annualized volatility
annualized_volatility <- volatility * sqrt(252)
# Max drawdown
running_max <- cummax(wealth_seq)
drawdowns <- 1 - wealth_seq / running_max
max_drawdown <- max(drawdowns, na.rm = TRUE)
# Cumulative return
cumulative_return <- tail(wealth_seq, 1) - 1
# Print all metrics
cat("\n===== Performance Metrics =====\n")
cat(sprintf("Final Wealth: %.4f\n", tail(wealth_seq, 1)))
cat(sprintf("Cumulative Return: %.2f%%\n", cumulative_return * 100))
cat(sprintf("Annualized Return: %.2f%%\n", annualized_return * 100))
cat(sprintf("Annualized Volatility: %.2f%%\n", annualized_volatility * 100))
cat(sprintf("Max Drawdown: %.2f%%\n", max_drawdown * 100))
cat("================================\n")
library(quantmod)
getSymbols('SPY', from='2011-01-01', to='2014-01-01')
SPY_price <- SPY$SPY.Adjusted
library(xts)
# Step 1: Scale strategy wealth
wealth_scaled <- wealth_seq / as.numeric(wealth_seq[1]) * 100
# Step 2: Create xts version of wealth, aligned with df_test dates
wealth_dates <- sort(unique(df_test$date))
wealth_xts <- xts(wealth_scaled[1:length(wealth_dates)], order.by = as.Date(wealth_dates))
# Step 3: Scale SPY prices
SPY_scaled <- SPY$SPY.Adjusted / as.numeric(SPY$SPY.Adjusted[1]) * 100
# Step 4: Align both time series to common index
combined <- merge(wealth_xts, SPY_scaled, join = "inner")
colnames(combined) <- c("Strategy", "SPY")
# Step 5: Plot
plot(combined, legend.loc = 'topleft', main = 'Wealth vs SPY', col = c("blue", "red"))
#detach("package:dplyr", unload = TRUE)
# Compute strategy daily returns from wealth
# Compute daily returns (already xts)
daily_returns <- diff(wealth_xts) / stats::lag(wealth_xts, k = 1)
strategy_returns_xts <- daily_returns  # it's already xts!
# Get SPY adjusted prices and compute log returns
SPY_ret_xts <- diff(log(SPY_price))
# Align dates and compute correlation
aligned_returns <- merge(strategy_returns_xts, SPY_ret_xts, join = "inner")
colnames(aligned_returns) <- c("Strategy", "SPY")
# Correlation calculation
correlation <- cor(aligned_returns$Strategy, aligned_returns$SPY, use = "complete.obs")
cat(sprintf("Correlation with SPY: %.4f\n", correlation))
# Print log final wealth
min(wealth_seq)
# This is a sample script implementing a simple momentum trading algorithm
# We compute 2-week (10-day) return. If it is positive, we go long on the stock
# If it is negative, we go short on the stock. We rebalance positions so that
# total position is at most the current wealth each day
library(putils)
library(dplyr)
library(quantmod)
library(lubridate)
library(lightgbm)
num_symbols <- 100
lookahead <- 21
train_length <- 504
valid_length <- 63
covariates <- c("open", "close", "low", "high", "volume", "dollar_vol",
"dollar_vol_rank", "rsi", "atr", "natr", "macd", "sma", "ema", "roc",
"r01", "r05", "r10", "r21", "r42", "r63", "r01dec", "r05dec", "r10dec",
"r21dec", "r42dec", "r63dec", "month", "weekday")
cat_var <- c('month', 'weekday')
params <- list(
objective = 'regression',
num_iterations = 30,
num_leaves = 50,
learning_rate = 0.1,
feature_fraction = 0.60,
bagging_fraction = 0.30,
min_data_in_leaf = 250
)
get_features <- function(data){
# Compute dollar vol
data = data %>% mutate(dollar_vol=close*volume)
# Compute dollar vol rank per day
data = data %>% group_by(date) %>% mutate(dollar_vol_rank=rank(desc(dollar_vol))) %>% ungroup()
# Compute RSI
data = data %>% group_by(symbol) %>% mutate(rsi=RSI(close)) %>% ungroup()
# Get Average True Range (ATR) and Normalized Average True Range (NATR)
data <- data %>% group_by(symbol)  %>% mutate(atr = ATR(cbind(high, low, close))[, 'atr']) %>% ungroup()
data = data %>% group_by(symbol) %>% mutate(natr = atr / close) %>% ungroup()
# Compute MACD
data = data %>% group_by(symbol) %>% mutate(macd = MACD(close)[, 'macd']) %>% ungroup()
# Compute SMA, EMA, ROC
data <- data %>% group_by(symbol) %>% mutate(sma = SMA(close),
ema = EMA(close),
roc = ROC(close)) %>% ungroup()
# Get month, day
data <- data %>% mutate(month = month(date),
weekday = as.numeric(format(as.Date(date), "%u")))
T = c(1, 5, 10, 21, 42, 63)
# Compute Lag returns
for (t in T) {
data = data %>% group_by(symbol) %>% mutate(!!sprintf("r%02d", t) := (close / lag(close, t)) - 1) %>% ungroup()
}
# Compute Lag returns deciles
for (t in T) {
data = data %>% group_by(date) %>%mutate(!!sprintf("r%02ddec", t) := ntile(.data[[sprintf("r%02d", t)]], 10)) %>% ungroup()
}
# Compute Forward returns, not used for prediction. Only used to obtain labels in initialise_state().
for (t in c(21)) {
data <- data %>% group_by(symbol) %>% mutate(!!sprintf("r%02d_fwd", t) := lead(.data[[sprintf("r%02d", t)]], n = t)) %>% ungroup()
}
return(data)
}
initialise_state <- function(data){
symbols_selected <- sort(head(data$symbol, length(unique(data$symbol))))
num_symbols <- length(symbols_selected)
unique_dates <- sort(as.Date(unique(data$date)))
# extract data for the 504 + 21 most recent days
dates_recent <- tail(unique_dates, train_length + lookahead)
data <- get_features(data)
data <- data[data$date %in% dates_recent, ]
day_idx <- 0
# for convenience of processing, we will convert df_recent to a list indexed by dates
df_list <- split(data, data$date)
df_list <- lapply(df_list, function(sub_df){
tmp <- matrix(NA, num_symbols, ncol(data %>% select(-symbol, -date))) # 32 col
rownames(tmp) <- symbols_selected
colnames(tmp) <- colnames(sub_df)[-c(1,2)]
tmp[sub_df$symbol, ] <- as.matrix(sub_df[, -c(1,2)])
tmp
})
# compute the `r21_fwd` column using historical data
for (i in 1:train_length){
df_list[[i]][ ,'r21_fwd'] <- df_list[[i+21]][, 'r21']
}
# positions is a matrix storing positions of each of the 50 stocks established in the past 21 days, which is initialise to 0.
positions <- matrix(0, lookahead, num_symbols)
colnames(positions) <- symbols_selected
# model stores the current best prediction model, initialise to NULL
model <- NULL
state <- list(day_idx=day_idx ,positions=positions, df_recent=df_list, model=model)
return(state)
}
# Function to execute the trading algorithm
trading_algorithm <- function(new_data, state){
symbols_selected <- sort(head(new_data$symbol, length(unique(new_data$symbol))))
num_symbols <- length(symbols_selected)
bunch(day_idx, positions, df_recent, model) %=% state
# increment day index by 1
day_idx <- day_idx + 1
# drop oldest date
df_recent[[1]] <- NULL
# convert new data to a matrix and append it in df_recent
tmp <- matrix(NA, num_symbols, ncol(state$df_recent[1][[1]]))
rownames(tmp) <- symbols_selected
colnames(tmp) <- colnames(state$df_recent[1][[1]])
# Compute lag-related indicators for new data using past 50 days data
# Using the past 50 days (instead of just 26) for each new day's calculation to accuracy and stability
past_26_dfs <- lapply(
(length(state$df_recent) - 49):length(state$df_recent),
function(i) {
df <- as.data.frame(state$df_recent[[i]])
df$symbol <- rownames(df)
df$date <- names(state$df_recent[i])[1]
df
}
)
past_26_dfs = do.call(rbind, past_26_dfs)
new_data_features = past_26_dfs %>% get_features() %>% filter(date==max(date))
tmp[new_data$symbol, c(colnames(tmp))] <- as.matrix(new_data_features[, c(colnames(tmp))])
new_date <- as.character(new_data$date[1]) # get current date
df_recent[[new_date]] <- tmp
# update the `r21_fwd` column for the 21-day ago matrix
df_recent[[train_length]][, 'r21_fwd'] <- df_recent[[new_date]][, 'r21']
# train a new model every 63 days
if (day_idx %% valid_length == 1){
train_mx <- do.call(rbind, df_recent[1:train_length])
dtrain <- lgb.Dataset(data=train_mx[, covariates],
label=train_mx[, 'r21_fwd'],
categorical_feature=cat_var)
model <- lgb.train(params = params, data = dtrain, verbose=-1)
}
# use the model to predict returns
preds <- predict(model, df_recent[[new_date]][, covariates])
# record the last open position to close
position_to_close <- positions[lookahead, ]
# move all previous positions down by one row
positions[2:lookahead, ] <- positions[1:(lookahead-1), ]
# New position: long top 40 ETFs and short bottom 10 ETFs in terms of predicted returns, store in the first row of positions
bottom_n_stock <- 10
top_n_stock <- 40
bottom_n_position <- -2/200
top_n_position <- -(bottom_n_position * bottom_n_stock / top_n_stock)
is_short <- rank(preds) <= bottom_n_stock
is_long <- rank(preds) > top_n_stock
positions[1, ] <- 0
positions[1, is_short] <- bottom_n_position
positions[1, is_long] <- top_n_position
# compute trades needed to establish new combined position
trades <- positions[1, ] - position_to_close
new_state <- list(day_idx=day_idx, positions=positions, df_recent=df_recent, model=model)
return(list(trades=trades, new_state=new_state))
}
### This is a script used to evaluate the performance of a trading algorithm
library(putils)
num_symbols <- 100
#### Main walk-forward backtesting function ####
walk_forward <- function(strategy, initialiser, df_train, df_test){
# Initialise state
state <- initialiser(df_train)
unique_test_dates <- sort(unique(df_test$date))
n_test_dates <- length(unique_test_dates)
positions <- matrix(0, nrow = n_test_dates, ncol = num_symbols)
daily_pnl <- rep(0, n_test_dates)
for (i in 1:n_test_dates){
# Extract new data for the current test date
new_data <- df_test[df_test$date == unique_test_dates[i], ]
# Run the trading strategy
bunch(trades, state) %=% strategy(new_data, state)
# Update position and daily PnL
if (i == 1){
price <- new_data[, 'close']
positions[i, ] <- trades
daily_pnl[i] <- 0 # No PnL on the first day since initial position = 0
} else {
price_lag1 <- price
price <- new_data[, 'close']
r1d <- price / price_lag1 - 1 # compute simple return
daily_pnl[i] <- sum(positions * r1d) # compute daily PnL
positions[i, ] <- positions[i - 1, ] * (1 + r1d) + trades# update position
}
printPercentage(i, n_test_dates)
}
# Compute cumulative wealth
wealth_seq <- 1 + cumsum(daily_pnl)
# Ensure wealth does not go negative
if (any(wealth_seq <= 0)) {
first_idx <- which(wealth_seq <= 0)[1]
wealth_seq[first_idx:n_test_dates] <- 0
}
# Plot wealth evolution
plot(wealth_seq, type='l')
# compute portfolio Sharp ratio, alpha and beta
rf <- 0.03 # risk free rate
# Annualised Sharpe ratio
SR <- mean(daily_pnl - rf/252, na.rm=TRUE) / sd(daily_pnl, na.rm=TRUE) * sqrt(252)
cat('Sharpe ratio =', SR)
return(wealth_seq)
}
#### Use this part to test that your script is working properly ####
# load data
df<- read.csv('df_train.csv')
# here we use part of the df_train.csv for testing,
# an additional test data set will be supplied in actual running
train_idx <- df$date < as.Date('2013-01-01')
df_train <- df[train_idx, ]
df_test <- df[!train_idx, ]
# Load strategy functions
script_name <- 'lightgbm_trading.R' # change to your own script name
source(script_name)
# Run backtest
wealth_seq= walk_forward(trading_algorithm, initialise_state, df_train, df_test)
# Print log final wealth
println('log wealth = ', log(tail(wealth_seq, 1)))
# Compute daily returns
daily_returns <- diff(wealth_seq) / head(wealth_seq, -1)
# Drop any NA (e.g., first day)
daily_returns <- daily_returns[!is.na(daily_returns)]
# Annualized return
total_days <- length(daily_returns)
annualized_return <- (tail(wealth_seq, 1))^(252 / total_days) - 1
# Annualized volatility
annualized_volatility <- volatility * sqrt(252)
# Max drawdown
running_max <- cummax(wealth_seq)
drawdowns <- 1 - wealth_seq / running_max
max_drawdown <- max(drawdowns, na.rm = TRUE)
# Cumulative return
cumulative_return <- tail(wealth_seq, 1) - 1
# Print all metrics
cat("\n===== Performance Metrics =====\n")
cat(sprintf("Final Wealth: %.4f\n", tail(wealth_seq, 1)))
cat(sprintf("Cumulative Return: %.2f%%\n", cumulative_return * 100))
cat(sprintf("Annualized Return: %.2f%%\n", annualized_return * 100))
cat(sprintf("Annualized Volatility: %.2f%%\n", annualized_volatility * 100))
cat(sprintf("Max Drawdown: %.2f%%\n", max_drawdown * 100))
cat("================================\n")
library(quantmod)
getSymbols('SPY', from='2013-01-01', to='2014-01-01')
SPY_price <- SPY$SPY.Adjusted
library(xts)
# Step 1: Scale strategy wealth
wealth_scaled <- wealth_seq / as.numeric(wealth_seq[1]) * 100
# Step 2: Create xts version of wealth, aligned with df_test dates
wealth_dates <- sort(unique(df_test$date))
wealth_xts <- xts(wealth_scaled[1:length(wealth_dates)], order.by = as.Date(wealth_dates))
# Step 3: Scale SPY prices
SPY_scaled <- SPY$SPY.Adjusted / as.numeric(SPY$SPY.Adjusted[1]) * 100
# Step 4: Align both time series to common index
combined <- merge(wealth_xts, SPY_scaled, join = "inner")
colnames(combined) <- c("Strategy", "SPY")
# Step 5: Plot
plot(combined, legend.loc = 'topleft', main = 'Wealth vs SPY', col = c("blue", "red"))
#detach("package:dplyr", unload = TRUE)
# Compute strategy daily returns from wealth
# Compute daily returns (already xts)
daily_returns <- diff(wealth_xts) / stats::lag(wealth_xts, k = 1)
strategy_returns_xts <- daily_returns  # it's already xts!
# Get SPY adjusted prices and compute log returns
SPY_ret_xts <- diff(log(SPY_price))
# Align dates and compute correlation
aligned_returns <- merge(strategy_returns_xts, SPY_ret_xts, join = "inner")
colnames(aligned_returns) <- c("Strategy", "SPY")
# Correlation calculation
correlation <- cor(aligned_returns$Strategy, aligned_returns$SPY, use = "complete.obs")
cat(sprintf("Correlation with SPY: %.4f\n", correlation))
# Print log final wealth
min(wealth_seq)
### This is a script used to evaluate the performance of a trading algorithm
library(putils)
num_symbols <- 100
#### Main walk-forward backtesting function ####
walk_forward <- function(strategy, initialiser, df_train, df_test){
# Initialise state
state <- initialiser(df_train)
unique_test_dates <- sort(unique(df_test$date))
n_test_dates <- length(unique_test_dates)
positions <- matrix(0, nrow = n_test_dates, ncol = num_symbols)
daily_pnl <- rep(0, n_test_dates)
for (i in 1:n_test_dates){
# Extract new data for the current test date
new_data <- df_test[df_test$date == unique_test_dates[i], ]
# Run the trading strategy
bunch(trades, state) %=% strategy(new_data, state)
# Update position and daily PnL
if (i == 1){
price <- new_data[, 'close']
positions[i, ] <- trades
daily_pnl[i] <- 0 # No PnL on the first day since initial position = 0
} else {
price_lag1 <- price
price <- new_data[, 'close']
r1d <- price / price_lag1 - 1 # compute simple return
daily_pnl[i] <- sum(positions * r1d) # compute daily PnL
positions[i, ] <- positions[i - 1, ] * (1 + r1d) + trades# update position
}
printPercentage(i, n_test_dates)
}
# Compute cumulative wealth
wealth_seq <- 1 + cumsum(daily_pnl)
# Ensure wealth does not go negative
if (any(wealth_seq <= 0)) {
first_idx <- which(wealth_seq <= 0)[1]
wealth_seq[first_idx:n_test_dates] <- 0
}
# Plot wealth evolution
plot(wealth_seq, type='l')
# compute portfolio Sharp ratio, alpha and beta
rf <- 0.03 # risk free rate
# Annualised Sharpe ratio
SR <- mean(daily_pnl - rf/252, na.rm=TRUE) / sd(daily_pnl, na.rm=TRUE) * sqrt(252)
cat('Sharpe ratio =', SR)
return(wealth_seq)
}
#### Use this part to test that your script is working properly ####
# load data
df<- read.csv('df_train.csv')
# here we use part of the df_train.csv for testing,
# an additional test data set will be supplied in actual running
train_idx <- df$date < as.Date('2013-01-01')
df_train <- df[train_idx, ]
df_test <- df[!train_idx, ]
# Load strategy functions
script_name <- 'lightgbm_trading.R' # change to your own script name
source(script_name)
# Run backtest
wealth_seq= walk_forward(trading_algorithm, initialise_state, df_train, df_test)
# Print log final wealth
println('log wealth = ', log(tail(wealth_seq, 1)))
# Compute daily returns
daily_returns <- diff(wealth_seq) / head(wealth_seq, -1)
# Drop any NA (e.g., first day)
daily_returns <- daily_returns[!is.na(daily_returns)]
# Annualized return
total_days <- length(daily_returns)
annualized_return <- (tail(wealth_seq, 1))^(252 / total_days) - 1
# Annualized volatility
annualized_volatility <- volatility * sqrt(252)
# Max drawdown
running_max <- cummax(wealth_seq)
drawdowns <- 1 - wealth_seq / running_max
max_drawdown <- max(drawdowns, na.rm = TRUE)
# Cumulative return
cumulative_return <- tail(wealth_seq, 1) - 1
# Print all metrics
cat("\n===== Performance Metrics =====\n")
cat(sprintf("Final Wealth: %.4f\n", tail(wealth_seq, 1)))
cat(sprintf("Cumulative Return: %.2f%%\n", cumulative_return * 100))
cat(sprintf("Annualized Return: %.2f%%\n", annualized_return * 100))
cat(sprintf("Annualized Volatility: %.2f%%\n", annualized_volatility * 100))
cat(sprintf("Max Drawdown: %.2f%%\n", max_drawdown * 100))
cat("================================\n")
library(quantmod)
getSymbols('SPY', from='2013-01-01', to='2014-01-01')
SPY_price <- SPY$SPY.Adjusted
library(xts)
# Step 1: Scale strategy wealth
wealth_scaled <- wealth_seq / as.numeric(wealth_seq[1]) * 100
# Step 2: Create xts version of wealth, aligned with df_test dates
wealth_dates <- sort(unique(df_test$date))
wealth_xts <- xts(wealth_scaled[1:length(wealth_dates)], order.by = as.Date(wealth_dates))
# Step 3: Scale SPY prices
SPY_scaled <- SPY$SPY.Adjusted / as.numeric(SPY$SPY.Adjusted[1]) * 100
# Step 4: Align both time series to common index
combined <- merge(wealth_xts, SPY_scaled, join = "inner")
colnames(combined) <- c("Strategy", "SPY")
# Step 5: Plot
plot(combined, legend.loc = 'topleft', main = 'Wealth vs SPY', col = c("blue", "red"))
#detach("package:dplyr", unload = TRUE)
# Compute strategy daily returns from wealth
# Compute daily returns (already xts)
daily_returns <- diff(wealth_xts) / stats::lag(wealth_xts, k = 1)
strategy_returns_xts <- daily_returns  # it's already xts!
# Get SPY adjusted prices and compute log returns
SPY_ret_xts <- diff(log(SPY_price))
# Align dates and compute correlation
aligned_returns <- merge(strategy_returns_xts, SPY_ret_xts, join = "inner")
colnames(aligned_returns) <- c("Strategy", "SPY")
# Correlation calculation
correlation <- cor(aligned_returns$Strategy, aligned_returns$SPY, use = "complete.obs")
cat(sprintf("Correlation with SPY: %.4f\n", correlation))
# Print log final wealth
min(wealth_seq)
### This is a script used to evaluate the performance of a trading algorithm
library(putils)
num_symbols <- 100
#### Main walk-forward backtesting function ####
walk_forward <- function(strategy, initialiser, df_train, df_test){
# Initialise state
state <- initialiser(df_train)
unique_test_dates <- sort(unique(df_test$date))
n_test_dates <- length(unique_test_dates)
positions <- matrix(0, nrow = n_test_dates, ncol = num_symbols)
daily_pnl <- rep(0, n_test_dates)
for (i in 1:n_test_dates){
# Extract new data for the current test date
new_data <- df_test[df_test$date == unique_test_dates[i], ]
# Run the trading strategy
bunch(trades, state) %=% strategy(new_data, state)
# Update position and daily PnL
if (i == 1){
price <- new_data[, 'close']
positions[i, ] <- trades
daily_pnl[i] <- 0 # No PnL on the first day since initial position = 0
} else {
price_lag1 <- price
price <- new_data[, 'close']
r1d <- price / price_lag1 - 1 # compute simple return
daily_pnl[i] <- sum(positions * r1d) # compute daily PnL
positions[i, ] <- positions[i - 1, ] * (1 + r1d) + trades# update position
}
printPercentage(i, n_test_dates)
}
# Compute cumulative wealth
wealth_seq <- 1 + cumsum(daily_pnl)
# Ensure wealth does not go negative
if (any(wealth_seq <= 0)) {
first_idx <- which(wealth_seq <= 0)[1]
wealth_seq[first_idx:n_test_dates] <- 0
}
# Plot wealth evolution
plot(wealth_seq, type='l')
# compute portfolio Sharp ratio, alpha and beta
rf <- 0.03 # risk free rate
# Annualised Sharpe ratio
SR <- mean(daily_pnl - rf/252, na.rm=TRUE) / sd(daily_pnl, na.rm=TRUE) * sqrt(252)
cat('Sharpe ratio =', SR)
return(wealth_seq)
}
#### Use this part to test that your script is working properly ####
# load data
df<- read.csv('df_train.csv')
# here we use part of the df_train.csv for testing,
# an additional test data set will be supplied in actual running
train_idx <- df$date < as.Date('2013-01-01')
df_train <- df[train_idx, ]
df_test <- df[!train_idx, ]
# Load strategy functions
script_name <- 'lightgbm_trading.R' # change to your own script name
source(script_name)
# Run backtest
wealth_seq= walk_forward(trading_algorithm, initialise_state, df_train, df_test)
# Print log final wealth
println('log wealth = ', log(tail(wealth_seq, 1)))
# Compute daily returns
daily_returns <- diff(wealth_seq) / head(wealth_seq, -1)
# Drop any NA (e.g., first day)
daily_returns <- daily_returns[!is.na(daily_returns)]
# Annualized return
total_days <- length(daily_returns)
annualized_return <- (tail(wealth_seq, 1))^(252 / total_days) - 1
# Annualized volatility
annualized_volatility <- volatility * sqrt(252)
